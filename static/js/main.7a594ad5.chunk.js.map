{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.styled.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.styled.js","components/Statistics/Statistics.js","components/Section/Section.styled.js","components/Section/Section.js","components/Notification/Notification.styled.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","List","ul","ListItem","li","Statistics","good","neutral","bad","total","positivePercentage","Segment","section","Title","h2","Section","title","children","Text","p","Notification","message","CreateApp","useState","setGood","setNeutral","setBad","Object","keys","countTotalFeedback","values","reduce","quantitiy","label","labelValue","percentage","Math","round","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAEaA,EAASC,IAAOC,OAAV,sX,OCuBJC,EArBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,cAACP,EAAD,CAEEQ,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAHjC,SAKGA,GAJIA,SCPFG,EAAOT,IAAOU,GAAV,6FAMJC,EAAWX,IAAOY,GAAV,6FC0BNC,EA9BI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,eAACT,EAAD,WACE,eAACE,EAAD,mBACO,qCAAQG,QAEf,eAACH,EAAD,sBACU,qCAAQI,QAElB,eAACJ,EAAD,kBACM,qCAAQK,QAEd,eAACL,EAAD,oBACQ,qCAAQM,QAEhB,eAACN,EAAD,gCACoB,qCAAQO,EAAR,cClBbC,EAAUnB,IAAOoB,QAAV,uEAKPC,EAAQrB,IAAOsB,GAAV,sHCWHC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,eAACN,EAAD,WACE,cAACE,EAAD,UAAQG,IACPC,MCNMC,EAAO1B,IAAO2B,EAAV,qECUFC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,cAACH,EAAD,UAAOG,KCCD,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOjB,EAAP,KAAakB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOhB,EAAP,KAAgBkB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOf,EAAP,KAAYkB,EAAZ,KAEM/B,EAAUgC,OAAOC,KAAK,CAAEtB,OAAMC,UAASC,QAqBvCqB,EAAqB,WAEzB,OADmBF,OAAOG,OAAO,CAAExB,OAAMC,UAASC,QAChCuB,QAAO,SAACC,EAAWvB,GAAZ,OAAsBA,EAAQuB,IAAW,IAQpE,OACE,qCACE,cAAC,EAAD,CAAShB,MAAM,wBAAf,SACG,cAAC,EAAD,CAAiBrB,QAASA,EAASC,gBAhCnB,SAAAqC,GACrB,OAAQA,GACN,IAAK,OACHT,GAAQ,SAAAU,GAAU,OAAIA,EAAa,KACnC,MAEF,IAAK,UACHT,GAAW,SAAAS,GAAU,OAAIA,EAAa,KACtC,MAEF,IAAK,MACHR,GAAO,SAAAQ,GAAU,OAAIA,EAAa,KAClC,MAEF,QACE,aAoBF,cAAC,EAAD,CAASlB,MAAM,aAAf,SACGa,IAAuB,EACtB,cAAC,EAAD,CACEvB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOoB,IACPnB,mBAlB8B,WACtC,IAAMyB,EAAaC,KAAKC,MAAc,IAAP/B,EAAcuB,KAC7C,OAAOM,GAA0B,EAgBLG,KAGtB,cAAC,EAAD,CAAcjB,QAAQ,2BC1DhC,IAYekB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7a594ad5.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  width: 100px;\n  height: 40px;\n  margin-right: 20px;\n  padding: 10px 20px;\n  font-weight: 500;\n  font-size: 16px;\n  color: #fff;\n  background-color: rgb(41, 164, 221);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 5px;\n  border: none;\n  &:hover {\n    cursor: pointer;\n    background-color: rgb(71, 88, 241);\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './FeedbackOptions.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      {options.map(option => (\n        <Button\n          key={option}\n          type=\"button\"\n          onClick={() => onLeaveFeedback(option)}\n        >\n          {option}\n        </Button>\n      ))}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style-type: none;\n  margin-left: 0;\n  padding-left: 0;\n`;\n\nexport const ListItem = styled.li`\n  margin-bottom: 10px;\n  font-weight: 500;\n  font-size: 18px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List, ListItem } from './Statistics.styled';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <List>\n      <ListItem>\n        Good:<span> {good}</span>\n      </ListItem>\n      <ListItem>\n        Neutral:<span> {neutral}</span>\n      </ListItem>\n      <ListItem>\n        Bad:<span> {bad}</span>\n      </ListItem>\n      <ListItem>\n        Total:<span> {total}</span>\n      </ListItem>\n      <ListItem>\n        Positive feedback:<span> {positivePercentage}%</span>\n      </ListItem>\n    </List>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import styled from '@emotion/styled';\n\nexport const Segment = styled.section`\n  margin-top: 40px;\n  margin-left: 35px;\n`;\n\nexport const Title = styled.h2`\n  margin-left: 0;\n  text-transform: uppercase;\n  font-weight: 700;\n  font-size: 24px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Segment, Title } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <Segment>\n      <Title>{title}</Title>\n      {children}\n    </Segment>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  font-weight: 500;\n  font-size: 20px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return <Text>{message}</Text>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import { useState } from 'react';\nimport FeedbackOptions from 'components/FeedbackOptions/FeedbackOptions';\nimport Statistics from 'components/Statistics/Statistics';\nimport Section from 'components/Section/Section';\nimport Notification from 'components/Notification/Notification';\n\nexport default function CreateApp() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const options = Object.keys({ good, neutral, bad });\n\n  const handleFeedback = label => {\n    switch (label) {\n      case 'good':\n        setGood(labelValue => labelValue + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(labelValue => labelValue + 1);\n        break;\n\n      case 'bad':\n        setBad(labelValue => labelValue + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    const quantities = Object.values({ good, neutral, bad });\n    return quantities.reduce((quantitiy, total) => total + quantitiy, 0);\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const percentage = Math.round((good * 100) / countTotalFeedback());\n    return percentage ? percentage : 0;\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        {<FeedbackOptions options={options} onLeaveFeedback={handleFeedback} />}\n      </Section>\n\n      <Section title=\"Statistics\">\n        {countTotalFeedback() > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}